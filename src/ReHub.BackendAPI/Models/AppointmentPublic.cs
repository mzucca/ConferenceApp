/*
 * Ri-Hub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BackendAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppointmentPublic : IEquatable<AppointmentPublic>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]

        [DataMember(Name="id")]
        public Object Id { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [Required]

        [DataMember(Name="date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [Required]

        [DataMember(Name="time")]
        public Object Time { get; set; }


        /// <summary>
        /// Gets or Sets IsParticipant
        /// </summary>
        [Required]

        [DataMember(Name="is_participant")]
        public Object IsParticipant { get; set; }

        /// <summary>
        /// Gets or Sets ListenersNum
        /// </summary>
        [Required]

        [DataMember(Name="listeners_num")]
        public Object ListenersNum { get; set; }

        /// <summary>
        /// Gets or Sets MaxListeners
        /// </summary>
        [Required]

        [DataMember(Name="max_listeners")]
        public Object MaxListeners { get; set; }

        /// <summary>
        /// Gets or Sets Speaker
        /// </summary>
        [Required]

        [DataMember(Name="speaker")]
        public UserOut Speaker { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]

        [DataMember(Name="status")]
        public AppointmentStatusType Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentPublic {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsParticipant: ").Append(IsParticipant).Append("\n");
            sb.Append("  ListenersNum: ").Append(ListenersNum).Append("\n");
            sb.Append("  MaxListeners: ").Append(MaxListeners).Append("\n");
            sb.Append("  Speaker: ").Append(Speaker).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppointmentPublic)obj);
        }

        /// <summary>
        /// Returns true if AppointmentPublic instances are equal
        /// </summary>
        /// <param name="other">Instance of AppointmentPublic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentPublic other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsParticipant == other.IsParticipant ||
                    IsParticipant != null &&
                    IsParticipant.Equals(other.IsParticipant)
                ) && 
                (
                    ListenersNum == other.ListenersNum ||
                    ListenersNum != null &&
                    ListenersNum.Equals(other.ListenersNum)
                ) && 
                (
                    MaxListeners == other.MaxListeners ||
                    MaxListeners != null &&
                    MaxListeners.Equals(other.MaxListeners)
                ) && 
                (
                    Speaker == other.Speaker ||
                    Speaker != null &&
                    Speaker.Equals(other.Speaker)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsParticipant != null)
                    hashCode = hashCode * 59 + IsParticipant.GetHashCode();
                    if (ListenersNum != null)
                    hashCode = hashCode * 59 + ListenersNum.GetHashCode();
                    if (MaxListeners != null)
                    hashCode = hashCode * 59 + MaxListeners.GetHashCode();
                    if (Speaker != null)
                    hashCode = hashCode * 59 + Speaker.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppointmentPublic left, AppointmentPublic right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppointmentPublic left, AppointmentPublic right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
