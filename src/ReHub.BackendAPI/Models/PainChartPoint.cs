/*
 * Ri-Hub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BackendAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PainChartPoint : IEquatable<PainChartPoint>
    { 
        /// <summary>
        /// Gets or Sets XScalePointName
        /// </summary>
        [Required]

        [DataMember(Name="x_scale_point_name")]
        public Object XScalePointName { get; set; }

        /// <summary>
        /// Gets or Sets AvgPainRateBefore
        /// </summary>

        [DataMember(Name="avg_pain_rate_before")]
        public Object AvgPainRateBefore { get; set; }

        /// <summary>
        /// Gets or Sets AvgPainRateAfter
        /// </summary>

        [DataMember(Name="avg_pain_rate_after")]
        public Object AvgPainRateAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PainChartPoint {\n");
            sb.Append("  XScalePointName: ").Append(XScalePointName).Append("\n");
            sb.Append("  AvgPainRateBefore: ").Append(AvgPainRateBefore).Append("\n");
            sb.Append("  AvgPainRateAfter: ").Append(AvgPainRateAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PainChartPoint)obj);
        }

        /// <summary>
        /// Returns true if PainChartPoint instances are equal
        /// </summary>
        /// <param name="other">Instance of PainChartPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PainChartPoint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    XScalePointName == other.XScalePointName ||
                    XScalePointName != null &&
                    XScalePointName.Equals(other.XScalePointName)
                ) && 
                (
                    AvgPainRateBefore == other.AvgPainRateBefore ||
                    AvgPainRateBefore != null &&
                    AvgPainRateBefore.Equals(other.AvgPainRateBefore)
                ) && 
                (
                    AvgPainRateAfter == other.AvgPainRateAfter ||
                    AvgPainRateAfter != null &&
                    AvgPainRateAfter.Equals(other.AvgPainRateAfter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (XScalePointName != null)
                    hashCode = hashCode * 59 + XScalePointName.GetHashCode();
                    if (AvgPainRateBefore != null)
                    hashCode = hashCode * 59 + AvgPainRateBefore.GetHashCode();
                    if (AvgPainRateAfter != null)
                    hashCode = hashCode * 59 + AvgPainRateAfter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PainChartPoint left, PainChartPoint right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PainChartPoint left, PainChartPoint right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
