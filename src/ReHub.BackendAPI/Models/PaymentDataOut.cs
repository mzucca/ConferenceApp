/*
 * Ri-Hub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BackendAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentDataOut : IEquatable<PaymentDataOut>
    { 
        /// <summary>
        /// Gets or Sets LessonPackageName
        /// </summary>
        [Required]

        [DataMember(Name="lesson_package_name")]
        public Object LessonPackageName { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [Required]

        [DataMember(Name="cost")]
        public Object Cost { get; set; }

        /// <summary>
        /// Gets or Sets LessonsNum
        /// </summary>
        [Required]

        [DataMember(Name="lessons_num")]
        public Object LessonsNum { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [Required]

        [DataMember(Name="discount")]
        public Object Discount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentDataOut {\n");
            sb.Append("  LessonPackageName: ").Append(LessonPackageName).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  LessonsNum: ").Append(LessonsNum).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentDataOut)obj);
        }

        /// <summary>
        /// Returns true if PaymentDataOut instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentDataOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDataOut other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LessonPackageName == other.LessonPackageName ||
                    LessonPackageName != null &&
                    LessonPackageName.Equals(other.LessonPackageName)
                ) && 
                (
                    Cost == other.Cost ||
                    Cost != null &&
                    Cost.Equals(other.Cost)
                ) && 
                (
                    LessonsNum == other.LessonsNum ||
                    LessonsNum != null &&
                    LessonsNum.Equals(other.LessonsNum)
                ) && 
                (
                    Discount == other.Discount ||
                    Discount != null &&
                    Discount.Equals(other.Discount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LessonPackageName != null)
                    hashCode = hashCode * 59 + LessonPackageName.GetHashCode();
                    if (Cost != null)
                    hashCode = hashCode * 59 + Cost.GetHashCode();
                    if (LessonsNum != null)
                    hashCode = hashCode * 59 + LessonsNum.GetHashCode();
                    if (Discount != null)
                    hashCode = hashCode * 59 + Discount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentDataOut left, PaymentDataOut right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentDataOut left, PaymentDataOut right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
