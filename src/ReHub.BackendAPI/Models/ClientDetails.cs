/*
 * Ri-Hub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BackendAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ClientDetails : IEquatable<ClientDetails>
    { 
        /// <summary>
        /// Gets or Sets Birthday
        /// </summary>

        [DataMember(Name="birthday")]
        public Object Birthday { get; set; }

        /// <summary>
        /// Gets or Sets Pathology
        /// </summary>

        [DataMember(Name="pathology")]
        public PathologyType Pathology { get; set; }

        /// <summary>
        /// Gets or Sets Nationality
        /// </summary>

        [DataMember(Name="nationality")]
        public Object Nationality { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>

        [DataMember(Name="address")]
        public Object Address { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>

        [DataMember(Name="city")]
        public Object City { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>

        [DataMember(Name="province")]
        public Object Province { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>

        [DataMember(Name="country")]
        public Object Country { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>

        [DataMember(Name="postal_code")]
        public Object PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets BirthCity
        /// </summary>

        [DataMember(Name="birth_city")]
        public Object BirthCity { get; set; }

        /// <summary>
        /// Gets or Sets BirthCountry
        /// </summary>

        [DataMember(Name="birth_country")]
        public Object BirthCountry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientDetails {\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  Pathology: ").Append(Pathology).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  BirthCity: ").Append(BirthCity).Append("\n");
            sb.Append("  BirthCountry: ").Append(BirthCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClientDetails)obj);
        }

        /// <summary>
        /// Returns true if ClientDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Birthday == other.Birthday ||
                    Birthday != null &&
                    Birthday.Equals(other.Birthday)
                ) && 
                (
                    Pathology == other.Pathology ||
                    Pathology != null &&
                    Pathology.Equals(other.Pathology)
                ) && 
                (
                    Nationality == other.Nationality ||
                    Nationality != null &&
                    Nationality.Equals(other.Nationality)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Province == other.Province ||
                    Province != null &&
                    Province.Equals(other.Province)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    BirthCity == other.BirthCity ||
                    BirthCity != null &&
                    BirthCity.Equals(other.BirthCity)
                ) && 
                (
                    BirthCountry == other.BirthCountry ||
                    BirthCountry != null &&
                    BirthCountry.Equals(other.BirthCountry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Birthday != null)
                    hashCode = hashCode * 59 + Birthday.GetHashCode();
                    if (Pathology != null)
                    hashCode = hashCode * 59 + Pathology.GetHashCode();
                    if (Nationality != null)
                    hashCode = hashCode * 59 + Nationality.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Province != null)
                    hashCode = hashCode * 59 + Province.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                    if (BirthCity != null)
                    hashCode = hashCode * 59 + BirthCity.GetHashCode();
                    if (BirthCountry != null)
                    hashCode = hashCode * 59 + BirthCountry.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClientDetails left, ClientDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClientDetails left, ClientDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
