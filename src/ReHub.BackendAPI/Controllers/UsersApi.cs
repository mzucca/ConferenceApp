/*
 * Ri-Hub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using BackendAPI.Models;
using ReHub.DbDataModel.Services;

namespace BackendAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    {
        private readonly IClientRepository _repository;
        private readonly ILogger<UsersApiController> _logger;

        public UsersApiController(IClientRepository repository,ILogger<UsersApiController> logger)
        {
            _repository = repository;
            _logger = logger;
        }
        /// <summary>
        /// Change Doctor
        /// </summary>
        /// <param name="newDoctorId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/rehub/client/change_doctor")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("ChangeDoctorClientChangeDoctorPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClientOut), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult ChangeDoctor([FromQuery][Required()]Object newDoctorId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClientOut));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"doctor\" : {\r\n    \"avatar_url\" : \"\",\r\n    \"surname\" : \"\",\r\n    \"name\" : \"\",\r\n    \"about\" : \"\",\r\n    \"id\" : \"\",\r\n    \"is_verified\" : \"\",\r\n    \"email\" : \"\"\r\n  },\r\n  \"gender\" : \"\",\r\n  \"avatar_url\" : \"\",\r\n  \"balance\" : \"\",\r\n  \"sub_type\" : \"\",\r\n  \"surname\" : \"\",\r\n  \"name\" : \"\",\r\n  \"id\" : \"\",\r\n  \"type\" : \"\",\r\n  \"is_verified\" : \"\",\r\n  \"email\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClientOut>(exampleJson)
                        : default(ClientOut);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Client
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/rehub/client/")]
        //[ValidateModelState]
        [SwaggerOperation("CreateClientClientPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResultMessage), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult CreateClientClientPost([FromBody]ClientCreate body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResultMessage));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"type\" : \"\",\r\n  \"message\" : \"\",\r\n  \"value\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ResultMessage>(exampleJson)
                        : default(ResultMessage);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Edit Password
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/rehub/edit-password")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("EditPasswordEditPasswordPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult EditPasswordEditPasswordPost([FromBody]UserEditPassword body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get By Id
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/by-id")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetByIdByIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserOut), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetByIdByIdGet([FromQuery][Required()]Object userId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserOut));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"gender\" : \"\",\r\n  \"avatar_url\" : \"\",\r\n  \"surname\" : \"\",\r\n  \"name\" : \"\",\r\n  \"id\" : \"\",\r\n  \"type\" : \"\",\r\n  \"is_verified\" : \"\",\r\n  \"email\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserOut>(exampleJson)
                        : default(UserOut);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Client Chart Data
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="groupBy"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/client/{client_id}/chart_data")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetClientChartDataClientClientIdChartDataGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetClientChartDataClientClientIdChartDataGet([FromRoute][Required]Object clientId, [FromQuery][Required()]GroupPainRateDataType groupBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Client
        /// </summary>
        /// <param name="clientId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/client/{client_id}")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetClientClientClientIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClientOut), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetClientClientClientIdGet([FromRoute][Required]Object clientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClientOut));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"doctor\" : {\r\n    \"avatar_url\" : \"\",\r\n    \"surname\" : \"\",\r\n    \"name\" : \"\",\r\n    \"about\" : \"\",\r\n    \"id\" : \"\",\r\n    \"is_verified\" : \"\",\r\n    \"email\" : \"\"\r\n  },\r\n  \"gender\" : \"\",\r\n  \"avatar_url\" : \"\",\r\n  \"balance\" : \"\",\r\n  \"sub_type\" : \"\",\r\n  \"surname\" : \"\",\r\n  \"name\" : \"\",\r\n  \"id\" : \"\",\r\n  \"type\" : \"\",\r\n  \"is_verified\" : \"\",\r\n  \"email\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClientOut>(exampleJson)
                        : default(ClientOut);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Client Details
        /// </summary>
        /// <param name="clientId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/client/{client_id}/details")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetClientDetailsClientClientIdDetailsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClientDetails), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetClientDetailsClientClientIdDetailsGet([FromRoute][Required]Object clientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClientDetails));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"birthday\" : \"1993-01-01\",\r\n  \"pathology\" : \"Broken shoulder\",\r\n  \"nationality\" : \"Greek\",\r\n  \"address\" : \"Piazza Seddio, 34 Appartamento 0\",\r\n  \"city\" : \"Terranegra\",\r\n  \"province\" : \"PD\",\r\n  \"country\" : \"Italy\",\r\n  \"postal_code\" : \"35127\",\r\n  \"birth_city\" : \"Sparta\",\r\n  \"birth_country\" : \"Greece\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClientDetails>(exampleJson)
                        : default(ClientDetails);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Doctor Clients
        /// </summary>
        /// <param name="doctorId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/doctor/clients")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetDoctorClientsDoctorClientsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetDoctorClientsDoctorClientsGet([FromQuery][Required()]Object doctorId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Doctor
        /// </summary>
        /// <param name="doctorId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/doctor/{id}")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetDoctorDoctorIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(DoctorOut), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetDoctorDoctorIdGet([FromQuery][Required()]Object doctorId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DoctorOut));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"avatar_url\" : \"\",\r\n  \"surname\" : \"\",\r\n  \"name\" : \"\",\r\n  \"about\" : \"\",\r\n  \"id\" : \"\",\r\n  \"is_verified\" : \"\",\r\n  \"email\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DoctorOut>(exampleJson)
                        : default(DoctorOut);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Doctor Schedule
        /// </summary>
        /// <param name="doctorId"></param>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/doctor/schedule")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetDoctorScheduleDoctorScheduleGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetDoctorScheduleDoctorScheduleGet([FromQuery][Required()]Object doctorId, [FromBody]BodyGetDoctorScheduleDoctorScheduleGet body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Me
        /// </summary>
        /// <response code="200">Successful Response</response>
        [HttpGet]
        [Route("/rehub/me")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetMe")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        public virtual IActionResult GetMe()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get My Appointments
        /// </summary>
        /// <response code="200">Successful Response</response>
        [HttpGet]
        [Route("/rehub/my-appointments")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetMyAppointmentsMyAppointmentsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        public virtual IActionResult GetMyAppointmentsMyAppointmentsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get My Notifications
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/my-notifications")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetMyNotificationsMyNotificationsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetMyNotificationsMyNotificationsGet([FromQuery]Object limit, [FromQuery]Object offset)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Read Clients
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/client/")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("ReadClientsClientGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetClients([FromQuery]int limit, [FromQuery]int offset)
        {
            var clients = _repository.GetPaged(offset,limit);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            
            return new JsonResult(clients);
        }

        /// <summary>
        /// Read Clients With Details
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/client/with_details")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("ReadClientsWithDetailsClientWithDetailsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult ReadClientsWithDetailsClientWithDetailsGet([FromQuery]Object limit, [FromQuery]Object offset)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Read Doctors
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/doctor/")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("ReadDoctorsDoctorGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult ReadDoctorsDoctorGet([FromQuery]Object limit, [FromQuery]Object offset)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Client Details
        /// </summary>
        /// <param name="body"></param>
        /// <param name="clientId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPut]
        [Route("/rehub/client/{client_id}/details")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("UpdateClientDetailsClientClientIdDetailsPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClientDetails), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult UpdateClientDetailsClientClientIdDetailsPut([FromBody]ClientDetails body, [FromRoute][Required]Object clientId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClientDetails));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"birthday\" : \"1993-01-01\",\r\n  \"pathology\" : \"Broken shoulder\",\r\n  \"nationality\" : \"Greek\",\r\n  \"address\" : \"Piazza Seddio, 34 Appartamento 0\",\r\n  \"city\" : \"Terranegra\",\r\n  \"province\" : \"PD\",\r\n  \"country\" : \"Italy\",\r\n  \"postal_code\" : \"35127\",\r\n  \"birth_city\" : \"Sparta\",\r\n  \"birth_country\" : \"Greece\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClientDetails>(exampleJson)
                        : default(ClientDetails);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
