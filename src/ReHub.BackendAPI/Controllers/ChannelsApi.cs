/*
 * Ri-Hub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using BackendAPI.Models;

namespace BackendAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ChannelsApiController : ControllerBase
    { 
        /// <summary>
        /// Add Conference Action
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/rehub/channels/add-action")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("AddConferenceActionChannelsAddActionPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConferenceAction), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult AddConferenceActionChannelsAddActionPost([FromBody]ConferenceActionIn body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConferenceAction));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"conference_id\" : \"\",\r\n  \"updated_at\" : \"\",\r\n  \"action\" : \"\",\r\n  \"created_at\" : \"\",\r\n  \"id\" : \"\",\r\n  \"actor_id\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConferenceAction>(exampleJson)
                        : default(ConferenceAction);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Close Conference
        /// </summary>
        /// <param name="conferenceId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpDelete]
        [Route("/rehub/channels/")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("CloseConferenceChannelsDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResultMessage), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult CloseConferenceChannelsDelete([FromQuery][Required()]Object conferenceId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResultMessage));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"type\" : \"\",\r\n  \"message\" : \"\",\r\n  \"value\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ResultMessage>(exampleJson)
                        : default(ResultMessage);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Conference
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/rehub/channels/")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("CreateConferenceChannelsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Conference), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult CreateConferenceChannelsPost([FromBody]ConferenceIn body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Conference));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"channel_name\" : \"\",\r\n  \"is_active\" : \"\",\r\n  \"updated_at\" : \"\",\r\n  \"channel_admin_id\" : \"\",\r\n  \"created_at\" : \"\",\r\n  \"id\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Conference>(exampleJson)
                        : default(Conference);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Channel Token
        /// </summary>
        /// <param name="channelName"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/channels/get-token")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetChannelTokenChannelsGetTokenGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(AgoraToken), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetChannelTokenChannelsGetTokenGet([FromQuery][Required()]Object channelName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AgoraToken));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"uid\" : \"\",\r\n  \"channel_token\" : \"\",\r\n  \"command_token\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AgoraToken>(exampleJson)
                        : default(AgoraToken);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Conference Actions
        /// </summary>
        /// <param name="conferenceId"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/channels/actions")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetConferenceActionsChannelsActionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetConferenceActionsChannelsActionsGet([FromQuery][Required()]Object conferenceId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Conference
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="404">The channel was not found</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/channels/by-id")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("GetConferenceChannelsByIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Conference), description: "Successful Response")]
        [SwaggerResponse(statusCode: 404, type: typeof(ResultMessage), description: "The channel was not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetConferenceChannelsByIdGet([FromQuery][Required()]Object id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Conference));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ResultMessage));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"channel_name\" : \"\",\r\n  \"is_active\" : \"\",\r\n  \"updated_at\" : \"\",\r\n  \"channel_admin_id\" : \"\",\r\n  \"created_at\" : \"\",\r\n  \"id\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Conference>(exampleJson)
                        : default(Conference);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Read Conferences
        /// </summary>
        /// <param name="onlyActive"></param>
        /// <param name="limit"></param>
        /// <param name="skip"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/rehub/channels/")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("ReadConferencesChannelsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult ReadConferencesChannelsGet([FromQuery]Object onlyActive, [FromQuery]Object limit, [FromQuery]Object skip)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
