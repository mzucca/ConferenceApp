/*
 * Ri-Hub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using Microsoft.AspNetCore.Authorization;
using BackendAPI.Models;

namespace BackendAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NotificationsApiController : ControllerBase
    { 
        /// <summary>
        /// Mark Notifications As Read
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/rehub/notifications/read")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("MarkNotificationsAsReadNotificationsReadPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult MarkNotificationsAsReadNotificationsReadPost([FromBody]Object body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Publish Notification
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/rehub/notifications/publish")]
        //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        [SwaggerOperation("PublishNotificationNotificationsPublishPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Notification), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult PublishNotificationNotificationsPublishPost([FromBody]NotificationCreate body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Notification));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\r\n  \"user_seen\" : \"\",\r\n  \"sender\" : {\r\n    \"gender\" : \"\",\r\n    \"avatar_url\" : \"\",\r\n    \"surname\" : \"\",\r\n    \"name\" : \"\",\r\n    \"id\" : \"\",\r\n    \"type\" : \"\",\r\n    \"is_verified\" : \"\",\r\n    \"email\" : \"\"\r\n  },\r\n  \"created_at\" : \"\",\r\n  \"id\" : \"\",\r\n  \"message\" : \"\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Notification>(exampleJson)
                        : default(Notification);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
